<!--
STRUCTURE:

<tests>
	<chapter id = "Chapter Name">
		<questions>
                        <question>
                                <statement></statement>
                                <answer id = "correct"></answer>
                                <answer></answer>
                                <answer></answer>
                                <answer></answer>
                        </question>
                </questions>
	</chapter>
</tests>

-->
<tests>
        <chapter id = "Operators">
                <questions>
                        <question>
                                <level>2</level>
                                <statement>How is 0 different from "0"?</statement>
                                <answer>0 is a string, "0" is an int</answer>
                                <answer id = "correct">0 is an int, "0" is a string</answer>
                                <answer>There is no difference</answer>
                                <answer>0 is a double, "0" is a int</answer>
                        </question>
                        <question>
                                <level>3</level>
                                <written>true</written>
                                <statement>```//Variables
### var1 = 0.54;
### var2 = 0.43;
### var3 = 43;
### var4 = 'c';```

Assign the proper data-types to these values</statement>
                                <answer id = "correct">double</answer>
                                <answer id = "correct">double</answer>
                                <answer id = "correct">int</answer>
                                <answer id = "correct">char</answer>
                        </question>
                        <question>
                                <level>3</level>
                                <written>true</written>
                                <statement>```//This value will hold the amount of money the user will have
### money;

//This value will hold the ID of the user
### id;

//This value will hold the initials of the user
### initials;

//This value will hold the letter of the division the user works at
### divisionLetter;```

Assign the proper data-types to these values</statement>
                                <answer id = "correct">double</answer>
                                <answer id = "correct">int</answer>
                                <answer id = "correct">String</answer>
                                <answer id = "correct">char</answer>
                        </question>
                        <question>
                                <level>3</level>
                                <written>true</written>
                                <statement>```//This value will hold the total sales of the store
### sales;

//This value will hold the store's street number
### sNum;

//This value will hold the number of shirts in the store
### numShirts;

//This value will hold the letter grade of the store in reviews
### grade;```

Assign the proper data-types to these values</statement>
                                <answer id = "correct">double</answer>
                                <answer id = "correct">int</answer>
                                <answer id = "correct">int</answer>
                                <answer id = "correct">char</answer>
                        </question>
                        <question>
                                <level>3</level>
                                <written>true</written>
                                <statement>```//This value will be used to sum two decimals
### sum;

//This value will hold the product of the two decimals
### product;

//This value will hold the remainder of two numbers
### remainder;

//This value will hold a random alphabet value
### alphabetValue;```

Assign the proper data-types to these values</statement>
                                <answer id = "correct">double</answer>
                                <answer id = "correct">double</answer>
                                <answer id = "correct">int</answer>
                                <answer id = "correct">char</answer>
                        </question>
                </questions>
        </chapter>
        <chapter id = "Escape Sequences">
            <questions>
                <question>
                    <level>3</level>
                    <written>true</written>
                    <statement>```String s = "This line ###Needs a new line here ###And here ###And here";```
How would you make new lines at requested?</statement>
                    <answer id = "correct">\n</answer>
                    <answer id = "correct">\n</answer>
                    <answer id = "correct">\n</answer>
                </question>
            </questions>
        </chapter>
        <chapter id = "Control Statements">
            <questions>
                <question>
                    <level>3</level>
                    <written>true</written>
                    <statement>```Scanner sc = ###
String s = sc.###```
Fill in the blanks so that variable c is equal to the next line inputted from the user.</statement>
                    <answer id = "correct">new Scanner(System.in);</answer>
                    <answer id = "correct">nextLine();</answer>
                </question>
                                <question>
                    <level>3</level>
                    <written>true</written>
                    <statement>```Scanner sc = ###
char c = sc.###```
Fill in the blanks so that variable c is equal to the next character inputted from the user.</statement>
                    <answer id = "correct">new Scanner(System.in);</answer>
                    <answer id = "correct">next();</answer>
                </question>
                                <question>
                    <level>3</level>
                    <written>true</written>
                    <statement>```Scanner sc = ###
int num = sc.###```
Fill in the blanks so that variable c is equal to the next integer inputted from the user.</statement>
                    <answer id = "correct">new Scanner(System.in);</answer>
                    <answer id = "correct">nextInt();</answer>
                </question>
                <question>
                    <level>3</level>
                    <written>true</written>
                    <statement>```Scanner sc = ###
double num = sc.###```
Fill in the blanks so that variable c is equal to the next double inputted from the user.</statement>
                    <answer id = "correct">new Scanner(System.in);</answer>
                    <answer id = "correct">nextDouble();</answer>
                </question>
                <question>
                    <level>5</level>
                    <written>true</written>
                    <statement>```//Loop that prints out 0 through 10 excluding 10
int sum = 0;
###(### i = ###; ### &lt; ###; ###){
    ###
}```
Fill in the blanks</statement>
                    <answer id = "correct">for</answer>
                    <answer id = "correct">int</answer>
                    <answer id = "correct">0</answer>
                    <answer id = "correct">i</answer>
                    <answer id = "correct">10</answer>
                    <answer id = "correct">i++</answer>
                    <answer id = "correct">System.out.println(i);</answer>
                </question>
                <question>
                    <level>5</level>
                    <written>true</written>
                    <statement>```//Loop that adds up 1-10 inclusively into variable "sum"
###(### i = ###; ### &lt;= ###; ###){
    sum += ###
}

//Value of Sum: ###```
Fill in the blanks</statement>
                    <answer id = "correct">for</answer>
                    <answer id = "correct">int</answer>
                    <answer id = "correct">1</answer>
                    <answer id = "correct">i</answer>
                    <answer id = "correct">10</answer>
                    <answer id = "correct">i++</answer>
                    <answer id = "correct">i;</answer>
                    <answer id = "correct">55</answer>
                </question>
                                <question>
                    <level>5</level>
                    <written>true</written>
                    <statement>```//Use Scanner sc (already initialized) to ask the user for a num
double num = ###

//Use a loop to ensure that the number inputted is 0 or greater
###(### ### ###){
    num = ###;
}```
Fill in the blanks</statement>
                    <answer id = "correct">sc.nextDouble();</answer>
                    <answer id = "correct">while</answer>
                    <answer id = "correct">num</answer>
                    <answer id = "correct">&lt;</answer>
                    <answer id = "correct">0</answer>
                    <answer id = "correct">sc.nextDouble();</answer>
                </question>
            </questions>
        </chapter>
        <chapter id = "Interfaces">
            <questions>
                <question>
                    <level>5</level>
                    <written>true</written>
                    <statement>```//Create a new interface
public ### myInterface(){
    //All implements of interface should include void method to display the values in the class
    public ### display()###

    //All implements of interface should include method to return an int sum
    public ### getSum()###
}```
Fill in the blanks</statement>
                    <answer id = "correct">interface;</answer>
                    <answer id = "correct">void</answer>
                    <answer id = "correct">;</answer>
                    <answer id = "correct">int</answer>
                    <answer id = "correct">;</answer>
                </question>
                <question>
                    <level>5</level>
                    <written>true</written>
                    <statement>```public class MyClass {
    //Constructor
    protected int num;
    public MyClass() {
        num = 24;
    }
}

//Class that inherits from MyClass
public class SecondClass ### {
    //Constructor that will get the variables from its super class
    public SecondClass(){
        ###
    }

    //Setter for num
    public ### setNum(### num){
        ### = ###
    }
}```
Fill in the blanks</statement>
                    <answer id = "correct">extends MyClass</answer>
                    <answer id = "correct">super();</answer>
                    <answer id = "correct">int</answer>
                    <answer id = "correct">this.num</answer>
                    <answer id = "correct">num;</answer>
                </question>
                <question>
                    <level>5</level>
                    <written>true</written>
                    <statement>```public class MyClass {
    //Constructor
    protected int num1;
    protected int num2;

    public MyClass() {
        num1 = 24;
        num2 = 5;
    }
}

//Class that inherits from MyClass
public class SecondClass ### {
    //Constructor that will get the variables from its super class
    public SecondClass(){
        ###
    }

    //Setter for num1
    public ### setNum1(### num1){
        ### = ###
    }

    //Setter for num2
    public ### setNum2(### num2){
        ### = ###
    }

    //Get Sum for num1 and num2 and return it
    public ### getSum(){
        int sum = ### + ###;
        ###
    }

}```
Fill in the blanks</statement>
                    <answer id = "correct">extends MyClass</answer>
                    <answer id = "correct">super();</answer>
                    <answer id = "correct">int</answer>
                    <answer id = "correct">this.num1</answer>
                    <answer id = "correct">num1;</answer>
                    <answer id = "correct">int</answer>
                    <answer id = "correct">this.num2</answer>
                    <answer id = "correct">num2;</answer>
                    <answer id = "correct">int</answer>
                    <answer id = "correct">num1</answer>
                    <answer id = "correct">num2</answer>
                    <answer id = "correct">return sum;</answer>
                </question>
            </questions>
        </chapter>
        <chapter id = "Packages">
            <questions>
                <question>
                    <level>4</level>
                    <written>true</written>
                    <statement>```//For a generic exception
###{
    //Code
}
###(### e){
    //Code
}```
Fill in the blanks</statement>
                    <answer id = "correct">try</answer>
                    <answer id = "correct">catch</answer>
                    <answer id = "correct">Exception</answer>
                </question>
                <question>
                    <level>4</level>
                    <written>true</written>
                    <statement>```//For an Arithmetic exception
###{
    //Code
}
###(### e){
    //Code
}```
Fill in the blanks</statement>
                    <answer id = "correct">try</answer>
                    <answer id = "correct">catch</answer>
                    <answer id = "correct">ArithmeticException</answer>
                </question>
                <question>
                    <level>4</level>
                    <written>true</written>
                    <statement>```//For a NullPointer exception
###{
    //Code
}
###(### e){
    //Code
}```
Fill in the blanks</statement>
                    <answer id = "correct">try</answer>
                    <answer id = "correct">catch</answer>
                    <answer id = "correct">NullPointerException</answer>
                </question>
                <question>
                    <level>3</level>
                    <written>true</written>
                    <statement>```//Import the java package for Random
### java.###.###```
Fill in the blanks</statement>
                    <answer id = "correct">import</answer>
                    <answer id = "correct">util</answer>
                    <answer id = "correct">Random;</answer>
                </question>
                                <question>
                    <level>3</level>
                    <written>true</written>
                    <statement>```//Import the java package for Math
### java.###.###```
Fill in the blanks</statement>
                    <answer id = "correct">import</answer>
                    <answer id = "correct">lang</answer>
                    <answer id = "correct">Math;</answer>
                </question>
                <question>
                    <level>3</level>
                    <written>true</written>
                    <statement>```//Import the java package for PrintStream
### java.###.###```
Fill in the blanks</statement>
                    <answer id = "correct">import</answer>
                    <answer id = "correct">io</answer>
                    <answer id = "correct">PrintStream;</answer>
                </question>
                <question>
                    <level>5</level>
                    <written>true</written>
                    <statement>```//Import the java package for Socket
### java.###.###```
Fill in the blanks</statement>
                    <answer id = "correct">import</answer>
                    <answer id = "correct">net</answer>
                    <answer id = "correct">Socket;</answer>
                </question>
                <question>
                    <level>3</level>
                    <written>true</written>
                    <statement>```//Import the java package for Scanner
### java.###.###```
Fill in the blanks</statement>
                    <answer id = "correct">import</answer>
                    <answer id = "correct">util</answer>
                    <answer id = "correct">Scanner;</answer>
                </question>
                <question>
                    <level>5</level>
                    <written>true</written>
                    <statement>```//Implement the sqrt method. Assume there are no imports
//Value to be rooted
double num = 25.0;
double root = ###```
Fill in the blanks</statement>
                    <answer id = "correct">java.lang.Math.sqrt(num);</answer>
                </question>
            </questions>
        </chapter>
</tests>